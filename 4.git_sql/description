1.You can create and go to a new branch with git checkout -b new_branch. The -b stands for "branch".

2.There's two steps to make git keep track of it for you. First you need to add it to the staging area like this: git add file_name. Add your README.md file to the staging area.

3. Open up your .json file and create an object with a reference for how to create a database that looks like this:

{
  "database": {
    "create": "CREATE DATABASE database_name;"
  }
}
Make sure there's one empty line at the bottom of the file and no extra spaces after the value or any of the curly brackets.

4.You can see the changes you made with git diff

5.
Commit messages often start with fix: or feat:, among others, to help people understand what your commit was for.

6. You can create a branch with git branch branch_name. Branches often start with fix/ or feat/, among others, like commit messages, but they use a forward slash and can't contain spaces. Create a new branch named feat/add-create-table-reference

7.You can see your new branch, but you are still on the main branch, as denoted with the *. To switch to a branch use: git checkout branch_name. Switch to your new branch.

8. in json "table": {
  "create": "CREATE TABLE table_name;"
}

9.Check the log again, but this time use the --oneline flag to condense the output so it's more readable.

10.You created the feat/add-create-table-reference branch, made a commit, and now it's ready to be added to the main branch. You can use git merge branch_name to bring changes from a branch into the branch you are currently on. Merge the changes from your feature branch into the main branch.

11.remember that, when you create a branch, it will be a clone of whatever branch you are on when you create it. That's why you switched to main first. Create and switch to a branch named fix/create-table-syntax.

12.The create table command is a function, so it needs parenthesis () at the end. Add those to the end of the command.

13.The bug fix is in and you can safely delete the branch. Go ahead and delete the branch that was for that fix. View your branches if you need to find the name.

14.You created this branch and made a commit. Since then, a commit for a bug fix was added to main. This is common with many people working on a codebase simultaneously. You need to update this branch so it has the same commits from main, but you can't just merge that branch into this one. You need that bug fix commit to be in the same order here as it is on main, right after the "drop table" commit. You need to rebase this branch against main to do that. Enter git rebase main to rebase this branch.

15.Another commit was added to main, you should update this branch again. To be more specific, a rebase will "rewind" this branch to where it last matched main, then, add the commits from main that aren't here. After that, it adds the commits you made to this branch on top. rebase this branch against main so it's up to date. You should see a conflict...

16. удалить изменения It says that you are still in the middle of rebasing and there's one file that needs to be merged yet. Add the file to staging like you would any other commit. 

17.There's been a mistake. This branch was for the insert command, not the update command. You can put your changes aside with git stash. Stash your changes so you can add them to a different branch.

18.You can see one item there. Bring the changes back with git stash pop.

19.The changes from the stash reappeared in the file and git showed the status for you. You are right where you left of before stashing the changes. Popping a stash like that will remove the most recent stash and apply it to your working tree. View the list of your stashes again.

20.
The changes are stashed again. View a condensed version of the changes in the latest stash with git stash show

21.You can see what file was changed and how many lines were added and removed from the file. View the full changes of the latest stash with git stash show -p. -p stands for "patch".

22.There's two identical items in your stash. Drop one of them with git stash drop or git stash drop <stash_name>

23.
This conflict is a little trickier. Make the JSON object whole again so you can add the changes and finish rebasing. Make sure you put all the references in their correct objects, and in the same order they were originally in. There may be a duplicate line you need to delete.

24.There was a commit to main since you last worked on this from when you merged the "add more row references" branch. Rebase this branch against main so it's up to date and you can finish working on it.

25.Fix the conflicts so that all the commands are in their correct objects.

26.There was a conflict when it tried to add the first commit from this branch on top of the one that was brought in from main. The rest of the commits were added without conflicts. 

27.
I'm going to show you a few ways to remove or undo a commit. The first is to simply "travel back in time". You can use the git reset command to travel to any point in your commit history. Your current HEAD is a reference to the last commit you just made. Use git reset HEAD~1 to go back one before HEAD.

28.This is a "mixed" reset and will put the changes from the commit you undid in your working tree. You can see that it says there's unstaged changes after the reset to your file. View your log with the oneline flag.

29.And the changes from the reset are back in the working tree. So when you reset to one commit before HEAD, it removed the most recent commit, and put all the changes in the working tree. If you used the --hard flag with the reset, the changes would have not been added to the working tree and if you used the --soft flag, the changes would have been added to the working tree and to staging. Add the changes back to staging so you can commit them again.

30. git revert HEAD отменить посл.фиксацию.Git put you into Nano and is asking you enter a commit message for the revert, but they added a default one for you. Don't change anything in Nano, just exit the file to use the default message. You can exit the file by pressing ctrl+x.

31.
Using revert to undo that commit added another commit that is the exact opposite of it. Enter git show into the terminal to see the last commit added (now HEAD) and its details.

32.
Type git show HEAD~1 to take a look at the details of the original commit that you reverted.

33.If you look at the bottom of those two messages, it shows the diff. The diff of the revert commit is the exact opposite of the one before it. Effectively, undoing the changes. You've used rebase to update this branch, but you can enter an "interactive" mode to manipulate commits. Type git rebase --interactive HEAD~2 into the terminal to enter this mode. The HEAD~2 means you will have a chance to change the last two commits.

34.
At the top of Nano, you can see the two commits with pick next to them. Below them, there's a list of options for working with them. pick means that it will use the commits as they were. At the bottom, it says, d, drop = remove commit. Replace the word pick preceeding your two commits with a d to drop them both. When you are done, save the file and exit Nano.

35.
Both, the commit to add the unique command and the one to revert it, were dropped. Enter another --interactive rebase that goes back to the --root instead of HEAD~2. I am going to show you how to change a commit message. --root means that the rebase will go back to your very first commit.

36.
You can see that the latest commit is at the bottom here. Be careful not to change the wrong commits. One of the options is r, reword = use commit, but edit the commit message. Replace pick with an r next to the commit with the message feat: add column reference to reword the message, it's the very first commit you added to this branch. When you are done, save the file and exit Nano. Git will put you in another Nano instance to reword the commit message. Don't change anything in it yet.

37.Git is waiting for you to edit the commit message. Add an s at the end of the commit message so it is feat: add column references. When you are done, save the file and exit Nano.

38.The message was reworded, but there's a problem. Look at the commit hash for your Initial commit from the last two times you viewed the log, it's that string left of the log. They aren't the same anymore since you rebased back to the root. Same goes for the rest of the commits. When you rebase interactively it changes all those hashes, so git sees them as different commits. If you were to try and merge this into main, it wouldn't work because they don't share the same history anymore. For this reason, you don't want to do an interactive rebase where you go back passed commits unique to the branch you are on. Fortunately, you can fix this. Enter git rebase main to realign the history of the two branches.

39.Now the hashes are the same as they were before you rebased back to --root, which is what they are on main. Enter another interactive rebase. Go back to the first commit you added to this branch, it's HEAD~5.

40.Squashing commits means that you will take a bunch of commits and turn them into one. This is helpful to keep your commit history clean and something you want try to do. Replace pick with an s next to all your commits except the one with the message feat: add column references. When you are done, save and exit the file. You will find yourself in another instance of Nano. Don't change anything in it yet.

41.Nano brought up a list of all the commit messages you used for the commits. Don't change anything in there, just exit the file to use those messages and finish squashing the commits.

42.You viewed the most recent log with a -1 flag. You can view the last x number of commits with any number instead of 1. View the last five commits with the oneline flag.

43..env files are used to store environment variables for running code. Often times, there may be sensitive information in it. Add the text SECRET=MY_SECRET to the file.